name: Deploy prod

on:
  workflow_dispatch: 

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Extract specified tag
        run: |
          echo "IMAGE_TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        
      - name: Put secrets in env
        uses: oNaiPs/secrets-to-env-action@v1
        with: 
          secrets: ${{toJson(secrets)}}
          
      - name: Checkout
        uses: actions/checkout@v3
          
      - name: Create secret env file
        run: envsubst < deploy/.env.template > deploy/.env.secret

      - name: Tar deploy folder
        run: tar -cvf deploy.tar deploy/
      
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved     

      - name: Setup VPN config
        run: echo "${{ secrets.OVPN_FILE }}" > config.ovpn

      - name: Connect to VPN 1
        id: vpnConnectStep1
        continue-on-error: true
        uses: "kota65535/github-openvpn-connect-action@v2"
        with:
          config_file: config.ovpn
          username: ${{secrets.OVPN_USERNAME}}
          password: ${{secrets.OVPN_PASSWORD}}

      - name: Connect to VPN 2
        id: vpnConnectStep2
        if: steps.vpnConnectStep1.outcome == 'failure'
        continue-on-error: true
        uses: "kota65535/github-openvpn-connect-action@v2"
        with:
          config_file: config.ovpn
          username: ${{secrets.OVPN_USERNAME}}
          password: ${{secrets.OVPN_PASSWORD}}

      - name: Connect to VPN 3
        id: vpnConnectStep3
        if: steps.vpnConnectStep2.outcome == 'failure'
        continue-on-error: false
        uses: "kota65535/github-openvpn-connect-action@v2"
        with:
          config_file: config.ovpn
          username: ${{secrets.OVPN_USERNAME}}
          password: ${{secrets.OVPN_PASSWORD}}

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Copy deploy.tar
        run: |
          sshpass -p "${{ secrets.HOST_PASSWORD }}" scp -o StrictHostKeyChecking=no deploy.tar ${{ secrets.HOST_USERNAME }}@${{ secrets.HOST }}:/home/${{ secrets.HOST_USERNAME }}/physedjournal

      - name: Pull and run containers
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{secrets.HOST}}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          script: |
            cd /home/${{secrets.HOST_USERNAME}}/physedjournal
            tar -xf deploy.tar
            cd deploy
            docker logout ghcr.io
            IMAGE_TAG=${{env.IMAGE_TAG}} docker compose -f docker-compose.prod.yml pull
            IMAGE_TAG=${{env.IMAGE_TAG}} docker compose -f docker-compose.prod.yml -p physedjournal up -d
            IMAGE_TAG=${{env.IMAGE_TAG}} docker compose -f docker-compose.prod.yml -p physedjournal restart
